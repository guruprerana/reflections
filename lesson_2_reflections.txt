1.Q. What happens when you initialize a repository?
Why do you need to do it?
When you initialize a repository, it creates a new
folder called .git to keep all the commits and
previous versions.

2.Q. How is the staging area different from the 
working directory and the repository? What value 
do you think it offers?
The staging area is the preparation area for a
commit. It prepares the file so that it can be
changed in the working directory or repository.

3.Q. How can you use the staging area to make 
sure you have one commit per logical change?
Once you make a small change, you can add it
to the staging area. Then you can even check
out what change you have made by using diff
to compare with working directory. You can
keep adding small changes to the staging
and can commit when you finish a logical change.

4.Q. What are some situations when branches would 
be helpful in keeping your history organized? How 
would branches help?
Suppose we want to introduce a new feature or make
some important chnages but we are not sure about it.
In such a situation, we can create a branch so that
the changes we make does not affect the working
version.

5.Q. How do the diagrams help you visualize the 
branch structure?
With diagrams, it becomes very easy to understand
the structure of commits and easily understand all
changes that have happened.

6.Q. What is the result of merging two branches 
together? Why do we represent it in the diagram the 
way we do?
When we merge two branches, all the changes we have
introduced in both branches get combined together.
You represent it like that because, the new merged
commit is a combined version.

7.Q. What are the pros and cons of Gitâ€™s automatic 
merging vs. always doing merges manually?
When Git merges automatically, it may result in a
mix of two versions where the program might not
even work.
But, when we do it manually we can pick and choose
the better aspects of both the versions to create one
working version.

Commands:

git add  |    Add a file to the staging area
git commit  |    Commit the files from the staging area to the repository 
git status  |    Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff  |    Git diff without arguments is comparing the working directory with the staging area
git diff --staged  |    Compare the staging area with the repository
git reset --hard  |    Undo all changes! There is no rollback for this, so be carefull!
git checkout master  |    Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2>  |    Show a visual representation of the commit history within different branches
git checkout -b new_branch_name  |    Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2  |    Merge two branches, branch2 get merged into branch1
git branch -d name  |    Remove the branch with the specified name
git show commitId  |    Show the changes made in this commit compared to the previous version. This is working even after merging.
